Loose ends:
- Make the max scale determined by screen size
- Update inventory screen to have new button system

Features:
1 Puzzle elements:
    - Intercepted codes
    - Switches
    - Triggers
    - Color changing/other effect layers
    - AND/OR/Timer relays
    - Doors
    - Disappearing platforms
1 Story elements:
    1 persistent plot variables.
    2 Separate global- and outfit- scope? (e.g. beating boss = global scope, key = outfit scope)
    2 An inventory. Can probably be purely cosmetic.
    1 Doors that can be locked or unlocked depending on plot variables from either scope.
        1 More generally, want entity state to depend on plot variables. 
    1 Potential implementation: Global- and outfit- scope implemented as a set of ints, similar to the system for keeping track of which pickups have been collected already. They are stored in the save but           loaded into the collider and can be accessed the same way as broadcast codes.
    2 NPCS and bosses which can modify plot variables.
    1 Dialog
    2 Inventory
1 Sound effects
1 Music: see http://dig.ccmixter.org for free music, or contact noise, or try to make your own!
1 Controller support
2 Gun pickups
2 Gun selection indicator
2 Map system: Use render test code on the collider texture
2 Wind/current object
2 leaf physicalParticles that fly eratically
2 Digital corruption visual effect; layer turns into random characters suddenly, gradually resolves back into
    original.
2 Lightning bolt, fire (spreads via embers), huge fireballs
2 Snakes (like in snake game) that move around and you can jump on them (platforming puzzle element)
2 transition visual effect
2 Wave and rocket guns
2 Explosions of sparks
2 Dust/debris falling from the ceiling (to go with shaking layer effect)
2 Plumes of steam
? Multi-thread processing for water and particles
? Editor misc:
    3 Display, allow changing palette selection (don't ignore number keys) in tab screen
    3 Add aB layer indicator which shows all of the layers and which one is selected
    3 Fix the default palette
    3 Need to be able to correspond entities in the file to entities in the editor more easily.

? Generic physicalEntity parameters (density/volume/mass)
? Combat elements:
    - Gun/turret enemies
    - Fast-moving enemies

Ideas:
    - Cyberpunk theme: Parallel digital and physical realms, distinct visual style, distinct puzzle types
    - Level where you find breath upgrades above water and ops below water - back and forth between those two
    - Level that is completely dark, must use bouncing particle explosion effect to navigate
    - WRT puzzles: Should give player feedback on plausible but wrong attempts, keep them entertained
    - You have a computer companion which is what allows you to broadcast codes. It has a test level which acts as
        the tutorial, also has randomly-generated puzzles with small bonuses.
    - Command line graphical effect when logging into a terminal.
    - Setting similar to New York 2140
        - Flooded coastal city decades from now after a climate apocalypse
        - Lowlands mostly abandoned, but buildings are hardened against the elements and continue to function
            - Robotic maintenance crews
            - Small-scale fission reactors
            - Internal networks functioning, external ones not so much
        - Circumstances of abandonment suspicious; possibly the gov't brought down the network and forced
            the city to be abandoned because an AGI was developed in one of the buildings, deemed too dangerous
            to interact with
    - Tutorial level: Older bro got you your neural interface hacking device, rewrote an abandoned building's
        network to teach you how to use it. Later he disappears, and you need to travel deeper into the abandoned
        city to find him...
    - Level where you're really bouncy, elasticity = 1.05 or something like that, but there are pools of water around and you need to use them to stop...

inspiration/vague visual ideas:
    - Giant drum machine like washing machine
    - Submechanophobia
    - Trippy AI face that speaks to you/watches you in the virtual world
        - AI doesn't want you poking around, if you go to far into his world he threatens you then starts killing you
            IRL and you have to get out of the level before he kills you entirely. Makes more sense if you don't usually
            have a health bar in the virtual world. Making virtual world one-hit-kill makes sense for small, puzzle-oriented levels.
    

Housekeeping items (may never get to all of these):
- Rewrite player::apply to be less confusing; maybe stop using bitsets, just use uint8_ts
- Docs, including "lessons learned"
- Replace x, y with Vector2 everywhere
- Create configure() functions rather than having 10-argument constructors/standardize constructor argument order
- Cap line lengths
- change everything from camelCase to PascalCase - use Perl to identify variable names using declarations? what about scoping?
- rename sizeFactor to Scale
- make layer use char[][] for mild performance benefits
- Convert rain to a generic random particle spawner that can spawn particles within a given box area
- Come up with better names for everything
- Several items which should be done together:
    - Rewrite save system as JSON
    - Rewrite player to not use so many fixed-size arrays
    - Create gun and op objects in player, instead of having a bunch of arrays
    - Guns and ops stored in player; pickups just unlock them.
        - Op data can be passed to player in readEntities() in game_main.cpp
- Split largest files (editables.cpp, player.cpp, editor_main.cpp) into smaller files, or at least improve structure

Bugs:
- player disappears when standing on tile right below top of level
- touch pickups sometimes collected (?) randomly
- Markers appearing in wrong place in level editor
- "Not a valid choice!" error appears when using op screen
- particles becoming zero-G
- Some of the files in "dark" getting loaded as wrong width
- Water appears weird when player is moving very slowly in the vertical direction
- If there are two water objects with one above the other, they tend to interfere.
- Particles don't appear right next to walls
- Layers still getting deleted multiple times under some circumstances?
- Player vibrates when standing on a surface

Idea: Setting is a floating colony in the atmosphere of a gas giant. Modeled after a truly massive blimp?

Zone ideas:
    Greenhouses
    Residencies
    Commerical District
    Park
    Fabrication/Manufacturing 
    Superstructure (outside of town)
    Substructure/hull (bottom of station)
    Antenna Array
    Life Support/Environmental Conditioning
    Atmospheric Monitoring
    Power Distribution
    Network
    Computation
    Transit Hub
    Landing Port
    Buoyancy Control
    Reservoir

Constraints on story:
    - Want it to be adapted to the medium of the game I'm creating (can be told through text, dialog and environment only)
    - Ideally, text (DOS?) visuals tie into the story somehow
    - Makes sense with guns/outfit system
    - Write what you know!
    - Want it to be about an abandoned city/industrial wasteland like Rain World
AND EITHER:
    - Want it to be touching and homely like Studio Ghibli (instead of contrived stories of high adventure.), or at least believable and relateable.
    - Story pacing fits with puzzle/exploration gameplay
OR:
    - Want it to have fighting robots!


Another story idea: A small crew of professional (licensed) scavengers/salvagers, exploring an abandoned planetary colony.
- Planetary colony was abandoned due to large-scale disaster (solar flare? earthquake? Ecosystem/life support destabilization?) which
    left infrastructure, heavy machinery more or less intact but made the area unliveable.
    - Maybe a prion or some other type of sickness spread through the colony's farms, making it impossible to continue living there.
        Colonists forced to leave before the food supply destabilized entirely.
- Salvage technicians searching for mechanisms containing unobtanium. They spread out to search the colony separately, but remain in occasional radio contact.
- Player is invited to explore the lives that were left behind when the colonists evacuated.
- Due to near-lightspeed travel, each assignment for the scavengers is at most a few months, but the investors don't see returns
    for decades. The scavengers have no communication with the outside world. 
- There may be a few people living in this abandoned world, living off their own cultivars which were more expensive/less desirable
    but not affected by the prion. These cultivars were not widely available enough to support the original colonists, and so the 
    evacuation was still necessary.
- Emotional arc related to reading a diary which was published, or you found, written by one of the survivors. Possibly the diary
    helps the player character find catharsis with a loss of their own somehow. (I'm not sure I'm up to writing this...)
Themes: Loss, isolation, abandonment. The sad sense you get walking through an empty airport where everyone is gone.

Another story idea: A popular, charismatic leader (A) takes with him a group of idealists to found a new colony in the upper 
atmosphere of a gas giant, similar to a seastead today. The objective of the colony is perfect policy created by an advanced, 
rigorously-tested quantum AI called (B). (A) dies unexpectedly, and (B) plans a huge state funeral for him. The population 
mourns his loss but expect the experiment to continue without much change; nominallly, (A)'s role was just as interim leader 
until (B) was tested thoroughly enough to take over.

However, trouble is brewing. (C), a scientist who helped to design (B), and (D), another member of (A)'s inner circle, fight 
over who should adopt (A)'s role. (D) wins, but fears a plot by (C) to depose him and take leadership for himself. (D) 
modifies (B) to prevent this, ensuring (B)'s loyalty and putting it in charge of a huge robotic secret police tasked with 
rooting out opposition to (D)'s leadership. (C), unaware of the modifications to (B), backs down and is allowed to remain head of 
science/technology; (D) fears his clout too much to fire him completely.

(C)'s lab detects a new crop disease which threatens to undermine the colony's food supply. (D) believes that it's a lie to undermine
his leadership, so he suppresses the results and imprisons (C), installing a crony in charge of his lab.
When the crop disease causes widespread food shortages, (D) calls for a new migration to another uninhabited planet, 
attempting to imitate (A) as a popular visionary and gain some of the loyalty he enjoyed. Under his orders, (B) begins 
preparing the colony ship for departure. However, the population deposes and imprisons (D) and installs (C) in his place,
although a small minority still support (D).

(C) is able to avert famine by carefully managing the crops not affected by the disease. Although this plan is workable and 
nobody starves, it's very uncomfortable. In addition, (B) remains loyal to (D), and prevents access to 
critical areas of the colony infrastructure while calling for (D)'s release. (C) makes a speech laying out a plan to 
stabilize the colony's biosphere and reset (B) to a previous state. The plan requires hard work and deprivation, and instead 
the population calls for the colony's ship to be relaunched, taking them back to civilization. (C) agrees and manages to 
wrest control of the ship from (B), after which the colonists make their escape, returning to a nearby habitable planet. (D) elects
to stay behind with (B), along with a small group who remain loyal to him; (C) allows this.

The player (E) launches to the colony as assistant/grad student to a political scientist (F) who wants to study the colony as 
an experiment in computer government. They enter cold sleep before (A)'s death and arrive after the departure of the ship 
with the majority of the colonists. The remaining colonists, under (D), insist that they are the colony which (A) intended to 
create. They tell you that the colony was abandoned by traitors who stole the ship belonging to them. They also tell you that 
as trespassers in the colony, your ship is forfeit and they imprison you in the living space of the colony, preventing you 
from thoroughly exploring the colony, searching out testimonies from the departed colonists (which they have also almost 
entirely erased), or leaving on your ship. Obviously, you escape to do these three things, while secretly remaining in contact with
your companion, who is able to help you work out the full story as you find artifacts left behind by the original colonists.

However, your primary goal is still to escape with the scientist. The scientist accidentally lets it slip that you were in 
contact, and as a result they are more thoroughly imprisoned. However, (D) does not know how to disable (F)'s advanced 
embedded communication tech, and so decides to forcefully put (F) in cold sleep instead. Since the colony does not have any 
cold sleep facilities itself, they put (F) into cold sleep on your ship! After you are able to figure out how to shut off 
power to the security systems, you are able to escape in your ship.


Maybe the story doesn't need to be so complicated. Maybe it's something like:
Brother is training you.
Brother disappears on scavenging trip.
Mom helps you look for him.
You discover an AGI which bootstrapped itself from building security systems, then
    managed to build nuclear missiles from reactor fuel (buildings have small reactors) and used it to
    blackmail the government into declaring the city off limits.
The AGI would have killed you too, but your mother figures out what's going on almost immediately and creates
    deadman data caches which will publicize its existence if you are killed.
Maybe the AGI offers you money, or a robot with your brother's mind in exchange for you don't publicize its existence?

Tim's feedback from session 2:
Visual difference between spikes and solid
Visual diff between attractors and repulsors
Early fun.json, and funner.json are calibrated as intro levels
Rebindable keys

Next hurdle: Make a good movement system!

Lessons from Tim's playtest session:
Movement system and level design must mesh. Maybe more important than either alone.
Make it visually intuitive.
Forcefield is visually misleading: Tim thought tapping forcefield made it more powerful.
Force direction not visually clear.

What makes a good movement system?
1. Not frustrating
	Not too hard to master; not too much learning curve
	Things that look easy, are easy; no "gotchas"
	Predictable
2. *Enables* the player to do "extra" things: Not always? But can be
3. Not exploitable; not hard to design levels around
	Things that look hard / are designed to be, are hard
4. Intangibly satisfying, like Warning Forever or multidash in HLD.
The current movement system breaks ALL of these rules!

Case studies:

Cave Story: Base movement system satisfies 1, 2, 3.
Booster v1 is not frustrating, enabling, somewhat satisfying
Booster v2 has a steeper learning curve, but is much more satisfying, rewards the optional additional effort
Principle: More challenging movement systems are OK if they're optional for advanced players and reward the extra effort.

Rain world: Satisfies 3 only, but fits very well thematically. Can be satisfying at times, but not very good IMO.
Exception: Combat is a major strength. Throwing spears is thrilling in a way that makes cave story's button-mashing seem meaningless.

Hyper Light Drifter: Timing is everything, but this isn't taught to the player. Can be frustrating.
Enabling
Not exploitable
Satisfying

Celeste: Not frustrating: Gives you powerful, intuitive tools, but asks you to do hard things quickly with them.
Not frustrating
*very* enabling
Exploitable, to a limited extent
*very* satisfying

Within A Deep Forest: Novel movement system requires a lot of getting used to, but can pay off.
Takes time to master; can be frustrating; things that look easy are hard.
Enables the player: Not really? Strictly weaker than a normal movement system.
Not exploitable
Not really satisfying

Portal: Intertia-based puzzle movement system. Just gets around the problem by being puzzle-focused without much hard platforming at all.

I think I'm too afraid to surprise the player. Learning a new movement system isn't all bad; in fact,
buying a new game and discovering you already know how to play it would be kinda frustrating. Just as long
as it has an acceptable learning curve.

Goals:
- Platformable:
	- Release jump button early to limit jump height
	- Change direction in midair
	- Crisp movement
	- Walljumps, double jumps, etc.
But also:
	- Can be flung long distances by forcefields

Major options:
- Fully inertia-based in X and Y axes
- Fully inertia-based, but allow player to stop in midair by pressing down
- Fully inertia-based in Y axis, give player full control in X axis.
- Fully inertia-based until player takes control again by pressing a movement button, and then add X friction.
- Like Gris or Portal, make all platforming challenges optional, and only solving puzzles is necessary to progress. Challenge by choice.

Can also play with:
- Speed: Slowing things down makes a challenging movement system much more palatable.
- Max fall speed (might mess with fun stuff like trampolines)

Probably want to (in general) have single-direction forcefields, since they're more intuitive to
reason about. Probably want a system which is fully inertia-based in Y axis, gives player full control
in X axis (basically, behaves as closely to a traditional platformer as possible) in the absence of
a horizontal force. Not sure how horizontal forces should be handled, but they can be used minimally/
as an optional extra challenge.

At least early on, forcefields should be clearly delineated with arrow markers. Could even have
them light up when activated! Could do some neat stuff with black and yellow hazard stripes.

