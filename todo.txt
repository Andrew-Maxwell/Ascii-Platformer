Loose ends:
- Thoroughly test new outfit system with >2 levels.
- Add player configuration options to the outfit system
    - elasticity, gravity, friction, jump speed, double/triple+ jumping/jetpacks, walljumps using physicalentity::hit
- Entities are loaded out-of-order.
    - Need to re-integrate player loading into gameleveldata::readEntities
    - Newly added entities currently go on top/bottom: Could solve this by having the "parent" entity contain and pass a list iterator pointing to itself to collider::addEntity, or could keep collider sorted by sizeFactor (?)
    - HUD is not always printing on top! Add a separate printHUD function?
- Helpful error message when running editor with no argument.
- Layers still getting deleted multiple times under some circumstances?
FIX LEVEL EDITOR:
    - Bring up to date with editorLevelData object
    - Small levels displayed flipped???

Features:
- Editor misc:
    - Allow changing background color
    - Display, allow changing palette selection (don't ignore number keys) in tab screen
    - Press delete to fill selection with space chars
    - Layer Boundary indicators getting cut off
    - Add a layer indicator which shows all of the layers and which one is selected
    - Make layer swap keys be q and e
    - Fix the default palette
- Need maxAmmoPickup
- Config file: Resolution, scaling
- Displaying and resizing variable-size entities (e.g. water, particle spawner) in editor.
- Generic physicalEntity parameters (density/volume/mass)
- Improved code interface
    - Intercepted codes
    - Colored based on code value
    - Broadcast animation
    - Indicators showing how many codes you've collected/total in the level
- Puzzle elements:
    - Switches
    - Triggers
    - Color changing/other effect layers
    - AND/OR/Timer relays
    - Doors
    - Moving platforms
    - Guns/turrets/enemies
- Overhaul movement: tweak everything. Decide how you want it to be *before* you start making levels.
    - Lower gravity = more time to manouver in air
- Wind/current object (or maybe put it in the collider?)
- leaf physicalParticles that fly eratically
- Digital corruption visual effect; layer turns into random characters suddenly, gradually resolves back into
    original.
- Lightning bolt, fire (spreads via embers), huge fireballs
- Snakes (like in snake game) that move around and you can jump on them (platforming puzzle element)

Ideas:
    - Cyberpunk theme: Parallel digital and physical realms, distinct visual style, distinct puzzle types
    - Level where you find breath upgrades above water and ops below water - back and forth between those two
    - Level that is completely dark, must use bouncing particle explosion effect to navigate
    - WRT puzzles: Should give player feedback on plausible but wrong attempts, keep them entertained
    - You have a computer companion which is what allows you to broadcast codes. It has a test level which acts as
        the tutorial, also has randomly-generated puzzles with small bonuses.
    - Command line graphical effect when logging into a terminal.
    - Setting similar to New York 2140
        - Flooded coastal city decades from now after a climate apocalypse
        - Lowlands mostly abandoned, but buildings are hardened against the elements and continue to function
            - Robotic maintenance crews
            - Small-scale fission reactors
            - Internal networks functioning, external ones not so much
        - Circumstances of abandonment suspicious; possibly the gov't brought down the network and forced
            the city to be abandoned because an AGI was developed in one of the buildings, deemed too dangerous
            to interact with

inspiration/vague visual ideas:
    - Giant drum machine like washing machine
    - Submechanophobia
    - Trippy AI face that speaks to you/watches you in the virtual world
        - AI doesn't want you poking around, if you go to far into his world he threatens you then starts killing you
            IRL and you have to get out of the level before he kills you entirely. Makes more sense if you don't usually
            have a health bar in the virtual world. Making virtual world one-hit-kill makes sense for small, puzzle-oriented levels.
    

Housekeeping items (may never get to all of these):
- Rewrite player::apply to be less confusing; maybe stop using bitsets, just use uint8_ts
- Docs, including "lessons learned"
- Replace x, y with Vector2 everywhere
- Create configure() functions rather than having 10-argument constructors/standardize constructor argument order
- Cap line lengths
- change everything from camelCase to PascalCase - use Perl to identify variable names using declarations? what about scoping?
- rename sizeFactor to Scale
- make layer use char[][] for mild performance benefits
- Convert rain to a generic random particle spawner that can spawn particles within a given box area
- Come up with better names for everything
- Several items which should be done together:
    - Rewrite save system as JSON
    - Rewrite player to not use so many fixed-size arrays
    - Create gun and op objects in player, instead of having a bunch of arrays
    - Guns and ops stored in player; pickups just unlock them.
        - Op data can be passed to player in readEntities() in game_main.cpp

Bugs:
- player disappears when standing on tile right below top of level
- touch pickups sometimes collected (?) randomly
- Markers appearing in wrong place in level editor
- "Not a valid choice!" error appears when using op screen
- Bullets disappear on contact with particles such as raindrops
